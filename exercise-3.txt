1. Create two folders project1 and project2 locally. Create a repository in github or bitbucket, name it test_project.

	mkdir project1
	
	mkdir project2

	# remote repository at
	https://bitbucket.org/abhikanojia/test_project.git

2. Switch to project1

	cd project1
	
	# initialised repository
	git init

	# add remote repository link as origin
	git remote add origin https://github.com/abhikanojia/test_project.git


3.Switch to a new branch - 'staging'.

	git checkout -b staging

4. Add a file in it - 'test1' and add content to it 'This is first commit'.
	
	touch test1.txt
	
	echo "content of new file" > test1.txt

	git add newfile.txt

	git commit -m "This is first commit in project1 directory"

5. Push it to github.
	git push origin --all

6. Move to folder project2.
	cd ../project2

6. Clone the repo in project2.
	# clone in current directory
	git clone https://github.com/abhikanojia/test_project.git .

7. Switch to staging.
	git checkout staging

8. Change the text in file 'test1' to 'This is second commit'.
	echo "changed test1 file" > test1.txt

9. Commit and push to remote branch.
	git add -u

	git commit -m "Changed text1 file"

10. Move to project1.
	cd ../project1

11. Switch to staging branch.
	git checkout staging

12. Change the text in file 'test1' to 'This is third commit'.
	
	echo "This is third commit" > test1.txt

13. Commit and push to remote branch. (Explain what happened here).
	
	git commit -m "Changed from project1 directory"

	# push to remote 
	git push origin staging

	git failed to push to remote as it was already modified by the another commit
	i.e that was done from project2 directory

	In this case as the hint suggest we have to pull changes first before pushing any
	to remote. 

14. Switch to master.
	
	git checkout -b master

15. Merge staging branch into master.
	
	git merge staging

16. Create a new branch testing.
	
	git branch testing

17. Change the text to 'A is an alphabet' and commit.
	
	echo "A is an alphabet" > test1.txt 

	# add modified files
	git add -u

18. Repeat the 'step 18' seven times and each time update the alphabet 'A' to 'B' to 'C' etc.(Don't forget to commit the change everytime)
	
	# change file
	echo "B is an alphabet" > test1.txt

	# add changes to staging area
	git add -u

	# commit changes
	git commit -m "B is an alphabet"
	.
	.
	.
	.
	.
	# change file
	echo "S is an alphabet" > test1.txt

	# add to staging area
	git add -u
	
	# commit changes
	git commit -m "S is an alphabet"


19. Push the branch to github.
	
	git push origin staging

20. Checkout to master.
	
	git checkout master

21. Change the text '1 is a number' and commit.
	
	# change file content

		echo "1 is a number" > test1.txt

	# add to staging area
		git add -u

	# commit changes

		git commit -m "1 is a number"

22. Repeat the 'step 22' seven times and each time update the number '1' to '2' to '3' etc.(Don't forget to commit the change everytime)
	
	# change file content

		echo "2 is a number" > test1.txt

	# add to staging area
		git add -u

	# commit changes

		git commit -m "2 is a number"
	.
	.
	.
	.
	.
	.
	.
	upto 23
	.
	.
	# change file content

		echo "23 is a number" > test1.txt

	# add to staging area
		git add -u

	# commit changes

		git commit -m "23 is a number"

23. Push master branch to github.
	
	git push origin master

24. Now, rebase testing into master(and don't push the new master and testing branch).
	
	git checkout testing

	git rebase master

25. Move to project2.

	cd ../project2

24. Track testing branch.
	
	# fetch all changes to remote repository
	git fetch

	# track a new branch

	git branch --track testing remotes/origin/testing

25. Checkout to master.
	
	git checkout master

26. Merge branch testing into master.

	git merge testing

27. Share your views about the difference between master and testing.

	# check differnce between both branches
		git diff master testing # returns nothing

	Hence, master and testing branches are same.